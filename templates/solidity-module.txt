// compiler version must be greater than or equal to 0.8.13 and less than 0.9.0
pragma solidity ^0.8.13;

interface XVM \{
    function xvm_call(
        bytes calldata context,
        bytes calldata to,
        bytes calldata input
    ) external;
}

contract name \{
    XVM constant XVM_PRECOMPILE = XVM(0x0000000000000000000000000000000000005005);

    address ink_address;

    constructor (address _ink_address) \{
        ink_address = _ink_address;
    }

{{ for message in spec.messages }}
{{- if message.mutates }} {# handling only non-view methods for now #}
    {{ for line in message.docs -}}
    // {line}
    {{ endfor -}}
    function {message.label}(
        {{- for arg in message.args }}
        { arg.type.type | type reference } { arg.type.type | type modifier } {arg.label-}
        {{- if not @last }},{{ endif -}}
        {{ endfor }}
    ) public 
    {{- if message.payable }} payable {{ endif }}
    {{- if not message.mutates }} view {{ endif }}
    returns ({ message.returnType.type | type reference })
    \{
        bytes4 selector = {message.selector};
        bytes memory contract_address = abi.encodePacked(ink_address);
        bytes memory buffer = bytes.concat(
            selector
            {{- for arg in message.args -}}
            ,
            encode_{arg.type.type | type reference}({arg.label})
            {{- endfor }}
        );

        XVM_PRECOMPILE.xvm_call("\x1f\x00", contract_address, buffer);
        return Result.Ok;
    }
{{ endif }}
{{ endfor }}

{{ for type in types }}
{{- if type.id mapped }}
    // mapped id {type.id | debug} -> {type.id | type reference}
{ type.id | type definition }
{ type.id | type encoder }
{{- endif }}
{{- endfor }}

    function encode_uint128(uint128 value) private pure returns (bytes memory) \{
        return abi.encodePacked(value);
    }

}
